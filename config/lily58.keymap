/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>

/ {
    macros {
        NotEqual: NotEqual {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press     &kp RALT>,
                <&macro_tap      &kp N8 &kp N8 &kp N0 &kp N0>,
                <&macro_release    &kp RALT>;

            label = "NOTEQUAL";
            wait-ms = <30>;
            tap-ms = <30>;
        };

        pi: pi {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <>;
            label = "PI";
        };
    };

    behaviors {
        wire: wire {
            compatible = "zmk,behavior-tap-dance";
            label = "WIRE";
            #binding-cells = <0>;
            bindings = <&kp Q>, <&kp LA(Q)>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // ------------------------------------------------------------------------------------------------------------
            // |  ESC  |  1  |  2  |  3   |  4   |  5   |                   |  6   |  7    |  8    |  9   |   0   |   `   |
            // |  TAB  |  Q  |  W  |  E   |  R   |  T   |                   |  Y   |  U    |  I    |  O   |   P   |   -   |
            // |  CTRL |  A  |  S  |  D   |  F   |  G   |                   |  H   |  J    |  K    |  L   |   ;   |   '   |
            // | SHIFT |  Z  |  X  |  C   |  V   |  B   |   "["  |  |  "]"  |  N   |  M    |  ,    |  .   |   /   | SHIFT |
            //                     | ALT  | GUI  | LOWER|  SPACE |  | ENTER | RAISE| BSPC  | GUI   |

            bindings = <
&kp ESC     &kp EXCL  &kp AT  &kp HASH  &kp DOLLAR  &kp PERCENT                         &kp CARET  &kp AMPERSAND  &kp ASTRK  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp BACKSPACE
&kp TAB     &kp Q     &kp W   &kp E     &kp R       &kp T                               &kp Y      &kp U          &kp I      &kp O                 &kp P                  &kp BACKSLASH
&kp LSHIFT  &kp A     &kp S   &kp D     &kp F       &kp G                               &kp H      &kp J          &kp K      &kp L                 &kp SINGLE_QUOTE       &kp ENTER
&to 0       &kp Z     &kp X   &kp C     &kp V       &kp B        &kp LCTRL    &kp RBKT  &kp N      &kp M          &kp COMMA  &kp DOT               &kp FSLH               &kp RSHFT
                              &kp LALT  &kp LGUI    &mo 0        &kp SPACE    &kp RET   &mo 0      &kp RALT       &kp RCTRL
            >;
        };

        SldWksNumb {
            bindings = <
&kp N7  &kp N8  &kp N9   &kp FSLH   &kp BSPC  &kp DEL                            &kp EQUAL  &kp LA(N8)  &kp LS(STAR)  &kp LS(LPAR)  &kp LS(RPAR)  &kp BSPC
&kp N4  &kp N5  &kp N6   &kp STAR   &kp A     &kp ESC                            &trans     &trans      &trans        &kp UP        &trans        &kp BSLH
&kp N1  &kp N2  &kp N3   &kp MINUS  &kp D     &kp S                              &trans     &trans      &kp LEFT      &kp DOWN      &kp RIGHT     &kp RET
&to 0   &kp N0  &kp DOT  &kp PLUS   &wire     &kp TAB    &kp LCTRL    &trans     &trans     &trans      &trans        &trans        &trans        &kp RSHFT
                         &kp RET    &kp LALT  &kp LSHFT  &kp SPACE    &kp SPACE  &mo 4      &kp RALT    &kp RCTRL
            >;
        };

        SldAlt {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans                    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
                        &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans
            >;
        };

        SldShift {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans                    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
                        &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans
            >;
        };

        Utility {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans                    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
                        &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans
            >;
        };

        WireRet {
            bindings = <
&trans  &trans  &trans  &trans  &trans     &trans                    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans     &trans                    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans     &trans                    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &kp LA(Q)  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
                        &trans  &trans     &trans  &trans    &trans  &trans  &trans  &trans
            >;
        };
    };
};
